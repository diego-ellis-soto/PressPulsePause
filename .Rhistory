require(geodata)
a = footprint(year=2009, path, ...)
install.packages('ddalpha')
require(ddalpha)
dataf = dataf.population()
## view the classes
unique(dataf$labels)
## access the 5th point of the 2nd object
dataf$dataf[[2]]$args[5]
dataf$dataf[[2]]$vals[5]
## plot the data
## Not run:
labels = unlist(dataf$labels)
plot(dataf,
main = "World population data",
xlab="Year", ylab="Population (in thousands)"
)
pop_data <- WDI(
country = "1W",            # 1W = world
indicator = "SP.POP.TOTL", # total population
start = 1980,
end   = 2021
)
pop_data
# 2A. Download global population data from 1980 to 2021
pop_data <- WDI(
country = "1W",            # 1W = world
indicator = "SP.POP.TOTL", # total population
start = 1980,
end   = 2021
)
# 2B. Clean and filter
pop_data_clean <- pop_data %>%
rename(
population = SP.POP.TOTL,
Year = year
) %>%
filter(!is.na(population))
# 2C. Plot with “press” styling
population_plot <- ggplot(pop_data_clean, aes(x = Year, y = population)) +
geom_line(size = 1.5, color = "firebrick") +        # thick red line
geom_smooth(color = "black", se = FALSE, size = 1.5) + # optional trend line
theme_classic(base_size = 16) +
labs(
x = "Year",
y = "Population",
title = "Global Population Over Time"
) +
theme(
axis.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 16),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
legend.key.size = unit(1.5, "lines")
)
# Display population plot
print(population_plot)
pop_data_clean
head(pop_data_clean)
pop_data_clean$iso2c
unique(pop_data_clean$iso2c)
# Replace CO2 emissions with something population related? Use WDIsearch() to find the right one with grepl unless you know some
# Replace population numbers with human footprint?
# Please revise the mobiltiy plot:
library(tidyverse)      # Includes dplyr, ggplot2, etc.
library(WDI)            # For World Bank data (CO2 emissions)
library(tidycovid19)    # For Google Mobility & Oxford COVID-19 data
library(lubridate)      # For date manipulations
library(cowplot)        # For arranging multiple plots
library(WDI)
# 2A. Download global population data from 1980 to 2021
pop_data <- WDI(
country = "1W",            # 1W = world
indicator = "SP.POP.TOTL", # total population
start = 1980,
end   = 2021
)
# 2B. Clean and filter
pop_data_clean <- pop_data %>%
rename(
population = SP.POP.TOTL,
Year = year
) %>%
filter(!is.na(population))
# 2C. Plot with “press” styling
population_plot <- ggplot(pop_data_clean, aes(x = Year, y = population)) +
geom_line(size = 1.5, color = "firebrick") +        # thick red line
geom_smooth(color = "black", se = FALSE, size = 1.5) + # optional trend line
theme_classic(base_size = 16) +
labs(
x = "Year",
y = "Population",
title = "Global Population Over Time"
) +
theme(
axis.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 16),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
legend.key.size = unit(1.5, "lines")
)
require(tidycensus)
years <- c(1990, 2000, 2010, 2020)
# Note: For 2020 Redistricting Data, the variable is typically "H1_001N" instead of "H001001".
# We can create a small helper that returns the correct variable for each year:
get_var_for_year <- function(year) {
if (year == 2020) {
return("H1_001N")  # 2020 Redistricting
} else {
return("H001001")  # 1990, 2000, 2010 Decennial SF1
}
}
# We want the boundary for Berkeley city
berkeley_boundary <- places(state = "CA", cb = TRUE) %>%
filter(NAME == "Berkeley") %>%
st_transform(crs = 4326)  # ensure it's in WGS84 for tidycensus consistency
require(sf)
require(tidycensus)
years <- c(1990, 2000, 2010, 2020)
# Note: For 2020 Redistricting Data, the variable is typically "H1_001N" instead of "H001001".
# We can create a small helper that returns the correct variable for each year:
get_var_for_year <- function(year) {
if (year == 2020) {
return("H1_001N")  # 2020 Redistricting
} else {
return("H001001")  # 1990, 2000, 2010 Decennial SF1
}
}
# We want the boundary for Berkeley city
berkeley_boundary <- places(state = "CA", cb = TRUE) %>%
filter(NAME == "Berkeley") %>%
st_transform(crs = 4326)  # ensure it's in WGS84 for tidycensus consistency
# Print to confirm
berkeley_boundary
places
library(tigris)
# We want the boundary for Berkeley city
berkeley_boundary <- places(state = "CA", cb = TRUE) %>%
filter(NAME == "Berkeley") %>%
st_transform(crs = 4326)  # ensure it's in WGS84 for tidycensus consistency
# Print to confirm
berkeley_boundary
# A function to get data for a single year
get_housing_data <- function(year) {
var_name <- get_var_for_year(year)  # H001001 or H1_001N
message("Fetching data for ", year, " using variable: ", var_name)
# For decennial: use get_decennial(...)
# For older years: 1990 and 2000 are often available in tidycensus,
# but 1980 can be partial. Confirm availability with load_variables(year, "sf1")
dec_data <- get_decennial(
geography = "tract",
variables = var_name,
year      = year,
state     = "CA",
county    = "Alameda",
survey    = "sf1",      # for decennial SF1
geometry  = TRUE,       # retrieve spatial data
cache     = TRUE
) %>%
rename(HousingUnits = !!var_name) %>%
# Convert to numeric if 2020 data returns character
mutate(HousingUnits = as.numeric(HousingUnits)) %>%
# Filter to only those tracts that intersect the Berkeley boundary
# using a spatial join or intersection:
st_transform(crs = st_crs(berkeley_boundary)) %>%
st_join(berkeley_boundary, join = st_intersects, left = FALSE) %>%
# We only keep columns we need:
select(GEOID, NAME, HousingUnits, geometry) %>%
mutate(Decade = as.character(year))
return(dec_data)
}
# Map over each year, bind together
housing_list <- lapply(years, get_housing_data)
berkeley_housing <- do.call(rbind, housing_list) %>%
st_make_valid()
# Inspect the final dataset
glimpse(berkeley_housing)
pop_data <- WDI(
country = "UY",            # 1W = world
indicator = "SP.POP.TOTL", # total population
start = 1980,
end   = 2021
)
# 2B. Clean and filter
pop_data_clean <- pop_data %>%
rename(
population = SP.POP.TOTL,
Year = year
) %>%
filter(!is.na(population))
# 2C. Plot with “press” styling
population_plot <- ggplot(pop_data_clean, aes(x = Year, y = population)) +
geom_line(size = 1.5, color = "firebrick") +        # thick red line
geom_smooth(color = "black", se = FALSE, size = 1.5) + # optional trend line
theme_classic(base_size = 16) +
labs(
x = "Year",
y = "Population",
title = "Global Population Over Time"
) +
theme(
axis.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 16),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
legend.key.size = unit(1.5, "lines")
)
population_plot
pop_data <- WDI(
country = "1W",            # 1W = world. # UY
indicator = "SP.POP.TOTL", # total population
start = 1980,
end   = 2021
)
# Refine and look into end of 2020 december those two red spikes ####
# Build a short-term pulse plot of weekend vs weekday mobility.
ggplot(google_de, aes(x = date, y = retail_and_recreation_percent_change_from_baseline)) +
geom_line(aes(color=weekend), size = 1) +
scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red"),
labels = c("Weekday", "Weekend")) +
theme_classic(base_size = 14) +
labs(
title = "Retail & Recreation Mobility in Germany (Google CMR)",
x = "Date",
y = "Change from Baseline (%)",
color = "Day Type"
) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text  = element_text(size = 12),
legend.position = "top"
)+xlim(as.Date(c('2020-09-01', '2020-10-01')))
ggplot(google_de, aes(x = date, y = retail_and_recreation_percent_change_from_baseline)) +
#  geom_line(aes(color=weekend), size = 1) +
geom_line(color='brown', size = 1) +
# scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red"),
#                    labels = c("Weekday", "Weekend")) +
theme_classic(base_size = 14) +
labs(
title = "Anthropulse Retail & Recreation Mobility in Germany (Google CMR)",
x = "Date",
y = "Change from Baseline (%)",
color = "Day Type"
) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text  = element_text(size = 12),
legend.position = "top"
)+xlim(as.Date(c('2020-12-01', '2021-01-31')))
mobility_plot <- ggplot(google_de, aes(x = date, y = retail_and_recreation_percent_change_from_baseline)) +
geom_line(aes(color = weekend), size = 1) +
scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red"),
labels = c("Weekday", "Weekend")) +
theme_classic(base_size = 14) +
labs(
title = "Retail & Recreation Mobility in Germany (Google CMR)",
x = "Date",
y = "Change from Baseline (%)",
color = "Day Type"
) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text  = element_text(size = 12),
legend.position = "top"
)
google_uru <- google_cmr %>%
filter(iso_alpha_2 == "UY") %>%
mutate(
date = as.Date(date),
day_of_week = wday(date, label = TRUE),  # lubridate
weekend     = day_of_week %in% c("Sat", "Sun")
)
ggplot(google_arg, aes(x = date, y = retail_and_recreation_percent_change_from_baseline)) +
geom_line(color = 'brown', size = 2) +
theme_classic(base_size = 14) +
labs(
title = "Retail & Recreation Mobility in Germany (Google CMR)",
x = "Date",
y = "Change from Baseline (%)",
color = "Day Type"
) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text  = element_text(size = 12),
legend.position = "top"
)+xlim(as.Date(c('2020-03-01', '2021-12-31')))
# Refine and look into end of 2020 december those two red spikes ####
# Build a short-term pulse plot of weekend vs weekday mobility.
mobility_plot <- ggplot(google_arg, aes(x = date, y = retail_and_recreation_percent_change_from_baseline)) +
geom_line(aes(color = weekend), size = 1) +
scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red"),
labels = c("Weekday", "Weekend")) +
theme_classic(base_size = 14) +
labs(
title = "Retail & Recreation Mobility in Germany (Google CMR)",
x = "Date",
y = "Change from Baseline (%)",
color = "Day Type"
) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text  = element_text(size = 12),
legend.position = "top"
)
mobility_plot
ggplot(google_arg, aes(x = date, y = retail_and_recreation_percent_change_from_baseline)) +
geom_line(color = 'brown', size = 1) +
theme_classic(base_size = 14) +
labs(
title = "Retail & Recreation Mobility in Germany (Google CMR)",
x = "Date",
y = "Change from Baseline (%)",
color = "Day Type"
) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text  = element_text(size = 12),
legend.position = "top"
)+xlim(as.Date(c('2020-03-01', '2021-12-31')))
a = terra('/Users/diegoellis/Downloads/hfp2000.tif')
require(terra)
a = rast('/Users/diegoellis/Downloads/hfp2000.tif')
a
mean(a$hfp2000)
hist(mean(a$hfp2000))
hist((a$hfp2000))
hist(a$hfp2000)
(a)
mapview(a)
require(mapview)
mapview(a)
a
a = raster('/Users/diegoellis/Downloads/hfp2000.tif')
require(raster)
a = raster('/Users/diegoellis/Downloads/hfp2000.tif')
plot(a)
mean(a$hfp2000)
raster::mean(a$hfp2000)
#
require(terra)
Stack = rast(a)
terra::global(Stack, "mean", na.rm=TRUE)
# Obtain world country data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define the countries for insets
inset_countries <- c("Brazil", "Australia", "India", "South Africa")
require(terra)
library(sf)
library(ggplot2)
library(cowplot)
library(rnaturalearth)
library(rnaturalearthdata)
a = raster('/Users/diegoellis/Downloads/hfp2000.tif')
Stack = rast(a)
terra::global(Stack, "mean", na.rm=TRUE)
# Obtain world country data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define the countries for insets
inset_countries <- c("Brazil", "Australia", "India", "South Africa")
# Extract the selected countries
countries_sf <- world[world$name %in% inset_countries, ]
# Assign each country to a list for easier handling
countries_list <- split(countries_sf, countries_sf$name)
# Create the global base map
global_map <- ggplot(data = world) +
geom_sf(fill = "antiquewhite") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_line(color = "gray70")
) +
labs(title = "Global Map with Country Insets",
subtitle = "Showing Selected Countries with Mean Values")
global_map
create_inset <- function(country_sf, main_map_extent) {
ggplot(data = country_sf) +
geom_sf(fill = "black") +
theme_void() +
theme(panel.border = element_rect(color = "black", fill=NA, size=0.5))
}
inset_plots <- lapply(countries_list, create_inset)
# Define positions for insets (x, y, width, height) in relative coordinates [0,1]
# Adjust these values based on desired placement
inset_positions <- list(
c(0.05, 0.05, 0.2, 0.2),  # Bottom-left
c(0.75, 0.05, 0.2, 0.2),  # Bottom-right
c(0.05, 0.75, 0.2, 0.2),  # Top-left
c(0.75, 0.75, 0.2, 0.2)   # Top-right
)
# Combine the main map with insets
final_map <- ggdraw() +
draw_plot(global_map)  # Add the global map first
# Add each inset to the final map
for(i in 1:length(inset_plots)) {
final_map <- final_map +
draw_plot(
inset_plots[[i]],
x = inset_positions[[i]][1],
y = inset_positions[[i]][2],
width = inset_positions[[i]][3],
height = inset_positions[[i]][4]
)
}
# Display the final map with insets
print(final_map)
# Create a SpatRaster object
Stack <- rast(a)  # If 'a' is already a SpatRaster, you can skip this step
# Calculate global mean, ignoring NA values
global_mean <- terra::global(Stack, fun = "mean", na.rm = TRUE)
print(global_mean)
# Check CRS of raster and vector data
raster_crs <- crs(Stack)
vector_crs <- st_crs(world)$proj4string
# If they differ, transform the vector data to match raster CRS
if (raster_crs != vector_crs) {
countries_sf <- st_transform(countries_sf, crs = raster_crs)
}
# Create the global base map
global_map <- ggplot(data = world) +
geom_sf(fill = "antiquewhite") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_line(color = "gray70")
) +
labs(title = "Global Map with Country Insets",
subtitle = "Showing Selected Countries with Mean Values")
global_map
create_inset <- function(country_sf, main_map_extent) {
ggplot(data = country_sf) +
geom_sf(fill = "black") +
theme_void() +
theme(panel.border = element_rect(color = "black", fill=NA, size=0.5))
}
inset_plots <- lapply(countries_list, create_inset)
inset_plots
countries_list
plot(countries_list)
countries_list
countries_sf
st_as_sf(countries_sf)
Stack
#
countries_sf |> st_transform(st_crs(Stack))
#
mapview(countries_sf |> st_transform(st_crs(Stack)))
#
countries_sf |> st_transform(st_crs(Stack))
#
countries_sf |> st_transform(st_crs(Stack)) |> mapview()
countries_sf |> st_transform(st_crs(Stack))  |> terra::global("mean", na.rm=TRUE)
countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(countries_sf, Stack)
Stack
Stack$hfp2000
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(countries_sf, Stack) # |> terra::global("mean", na.rm=TRUE)
Stack
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(countries_sf, Stack$hfp2000) # |> terra::global("mean", na.rm=TRUE)
?raster::extract
raster::extract(raster(Stack), countries_sf)
countries_sf_hfp
mapview(countries_sf_hfp)
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(countries_sf, Stack$hfp2000) # |> terra::global("mean", na.rm=TRUE)
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(countries_sf, Stack) # |> terra::global("mean", na.rm=TRUE)
countries_sf
Stack
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(Stack) # |> terra::global("mean", na.rm=TRUE)
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(raster(Stack)) # |> terra::global("mean", na.rm=TRUE)
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(st_bbox(Stack)) # |> terra::global("mean", na.rm=TRUE)
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(st_bbox(Stack)) # |> terra::global("mean", na.rm=TRUE)
# Extract the selected countries
countries_sf <- world[world$name %in% inset_countries, ]
countries_sf |> st_transform(st_crs(Stack)) |> mapview()
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))  |>
st_intersection(st_bbox(Stack)) # |> terra::global("mean", na.rm=TRUE)
countries_sf_hfp
countries_sf_hfp = countries_sf |> st_transform(st_crs(Stack))
countries_sf_hfp
mapview(countries_sf_hfp)
# Extract the selected countries
countries_sf <- world[world$name %in% inset_countries, ]
countries_sf
countries_sf |> st_transform(st_crs(Stack)) |> mapview()
countries_sf_hfp = countries_sf |>
st_intersection(st_bbox(Stack)) # |> terra::global("mean", na.rm=TRUE)
countries_sf_hfp = countries_sf |>
st_intersection() # |> terra::global("mean", na.rm=TRUE)
countries_sf_hfp
mapview(countries_sf_hfp)
terra::extract(Stack, countries_sf)
countries_sf$hfp2000 = terra::extract(Stack, countries_sf)
# Extract the selected countries
countries_sf <- world[world$name %in% inset_countries, ]
countries_sf_tmp = raster::extract(raster(Stack), countries_sf)
# 2A. Download global population data from 1980 to 2021
pop_data <- WDI(
country = "1W",            # 1W = world. # UY
indicator = "SP.POP.TOTL", # total population
start = 1980,
end   = 2021
)
